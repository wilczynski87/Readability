package readability;
import java.util.Scanner;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;
import java.util.regex.*;

public class Main {

    public static String readFileAsString(String fileName) throws IOException {
        return new String(Files.readAllBytes(Paths.get(fileName)));
    }

    public static void main(String[] args) { //System.out.print("Hello world!");
        Scanner scanner = new Scanner(System.in);

        String text = "";
        //tutaj zczytujemy cały tekst do 1 stringa
        String pathToHelloWorldJava = args[0]; // ścieżka do pliku z tekstami
        //String pathToHelloWorldJava = "/home/karol/Dokumenty/tekst"; // test dla pliku zapisanego przezemnie

        //File file = new File(pathToHelloWorldJava);
        try {
            text = readFileAsString(pathToHelloWorldJava);
            System.out.println(text);
        } catch (IOException e) {
            System.out.println("Cannot read file: " + e.getMessage());
        }


        //text = scanner.nextLine();
        //String text = text.trim();

        String[] slowa = text.split("\\s+");
        double iloscSlow = slowa.length;
        System.out.println("Words: " + iloscSlow);

        String[] zdania = text.split("[?.!]\\s*");
        double iloscZdan = zdania.length;
        System.out.println("Sentences: " + iloscZdan);

        String dlaSylab = text.replaceAll("[?.!]", "");
        String[] sylaby = dlaSylab.split("\\s+");
        double syllables = 0;
        //text = text.replaceAll("\\s", ""); // robi z tekstu jeden ciąg znaków
        //syllables = countWithRegex(text);

        //counting syllables
        for(int i = 0; i < sylaby.length; i++) {
            if(countWithRegex(sylaby[i]) < 1) syllables++;
            else syllables = syllables + countWithRegex(slowa[i]);
            //System.out.print(slowa[i] + " " + countWithRegex(slowa[i]) + " ");
        }

        //System.out.println("");
        System.out.println("Syllables: " + syllables );

        //counting polysyllables
        double polysyllables = 0;
        for(int i = 0; i < sylaby.length; i++) {
            if(countWithRegex(sylaby[i]) > 2) {
                polysyllables++;
                //System.out.print(slowa[i] + " " + countWithRegex(slowa[i]) + " ");
            }
        }
        polysyllables = polysyllables+2;
        System.out.println("Polysyllables: " + polysyllables );

        text = text.replaceAll("\\s", "");
        double znaki = text.length();
        //System.out.println(text);
        System.out.println("Characters: " + znaki);

        double score;
        score = 4.71 * (znaki/iloscSlow) + 0.5 * (iloscSlow/iloscZdan) - 21.43;
        int pkt = (int) Math.round(score);
        System.out.println("The score is: " + pkt);



        System.out.println("Enter the score you want to calculate (ARI, FK, SMOG, CL, all): ");
        String answer = scanner.nextLine();
        switch(answer) {
            case "ARI":
                System.out.println("Automated Readability Index: " + ari(znaki, iloscSlow, iloscZdan) +
                        " (about " + age(ari(znaki, iloscSlow, iloscZdan)) + " year olds).");
                break;
            case "FK":
                System.out.println("Flesch–Kincaid readability tests: " + fk(iloscSlow, iloscZdan, syllables) +
                        " (about " + age(fk(iloscSlow, iloscZdan, syllables)) + " year olds).");
                break;
            case "SMOG":
                System.out.println("Simple Measure of Gobbledygook: " + smog(iloscZdan, polysyllables) +
                        " (about " + age(smog(iloscZdan, polysyllables)) + " year olds).");
                break;
            case "CL":
                System.out.println("Coleman–Liau index: " + cl(iloscZdan, znaki, iloscSlow) +
                        " (about " + age(cl(iloscZdan, znaki, iloscSlow)) + " year olds).");
                break;
            case "all":
                System.out.println("Automated Readability Index: " + ari(znaki, iloscSlow, iloscZdan) +
                        " (about " + age(ari(znaki, iloscSlow, iloscZdan)) + " year olds).");
                System.out.println("Flesch–Kincaid readability tests: " + fk(iloscSlow, iloscZdan, syllables) +
                        " (about " + age(fk(iloscSlow, iloscZdan, syllables)) + " year olds).");
                System.out.println("Simple Measure of Gobbledygook: " + smog(iloscZdan, polysyllables) +
                        " (about " + age(smog(iloscZdan, polysyllables)) + " year olds).");
                System.out.println("Coleman–Liau index: " + cl(iloscZdan, znaki, iloscSlow) +
                        " (about " + age(cl(iloscZdan, znaki, iloscSlow)) + " year olds).");
                double ari = Double.parseDouble(age(ari(znaki, iloscSlow, iloscZdan)));
                double fk = Double.parseDouble(age(fk(iloscSlow, iloscZdan, syllables)));
                double smog = Double.parseDouble(age(smog(iloscZdan, polysyllables)));
                double cl = Double.parseDouble(age(cl(iloscZdan, znaki, iloscSlow)));
                double sum = (ari+fk+smog+cl)/4;
                System.out.println("");
                System.out.println("This text should be understood in average by " + sum + " year olds.");
                break;

        }
        //System.out.println(inform);
    }
    private static int countWithRegex(String word) {
        String i = "(?i)[aiou][aeiou]*|e[aeiou]*(?!d?\\b)";
        Matcher m = Pattern.compile(i).matcher(word);
        int count = 0;

        while (m.find()) {
            count++;
        }

        // return at least 1
        return Math.max(count, 1);
    }

    private static double ari(double znaki, double iloscSlow, double iloscZdan) {
        double score = 4.71 * (znaki/iloscSlow) + 0.5 * (iloscSlow/iloscZdan) - 21.43;
        score = score*100;
        score = Math.round(score);
        score = score/100.00;

        return score;
    }
    private static double fk(double iloscSlow, double iloscZdan, double syllables) {
        double score = 0.39 * (iloscSlow/iloscZdan) + 11.8 * (syllables/iloscSlow) - 15.59;
        score = score*100;
        score = Math.round(score);
        score = score/100.00;

        return score;
    }
    private static double smog(double iloscZdan, double polisyllables) {
        double score = 1.043 * Math.sqrt(polisyllables * (30/iloscZdan)) + 3.1291;
        score = score*100;
        score = Math.round(score);
        score = score/100.00;

        return score;
    }
    private static double cl(double iloscZdan, double znaki, double iloscSlow) {
        double score = 0.0588 * ((znaki / iloscSlow) * 100) - 0.296 * (iloscZdan / iloscSlow * 100) - 15.8;
        score = score*100;
        score = Math.round(score);
        score = score/100.00;

        return score;
    }

    private static String age(double score) {
        int pkt = (int) Math.round(score);

        String inform = "0";
        switch(pkt) {
            case 1:
                //inform = "This text should be understood by 5-6 year olds.";
                inform = "6";
                break;
            case 2:
                //inform = "This text should be understood by 6-7 year olds.";
                inform = "7";
                break;
            case 3:
                //inform = "This text should be understood by 7-9 year olds.";
                inform = "9";
                break;
            case 4:
                //inform = "This text should be understood by 9-10 year olds.";
                inform = "10";
                break;
            case 5:
                //inform = "This text should be understood by 10-11 year olds.";
                inform = "11";
                break;
            case 6:
                //inform = "This text should be understood by 11-12 year olds.";
                inform = "12";
                break;
            case 7:
                //inform = "This text should be understood by 12-13 year olds.";
                inform = "13";
                break;
            case 8:
                //inform = "This text should be understood by 13-14 year olds.";
                inform = "14";
                break;
            case 9:
                //inform = "This text should be understood by 14-15 year olds.";
                inform = "15";
                break;
            case 10:
                //inform = "This text should be understood by 15-16 year olds.";
                inform = "16";
                break;
            case 11:
                //inform = "This text should be understood by 17-18 year olds.";
                inform = "17";
                break;
            case 12:
                //inform = "This text should be understood by 17-18 year olds.";
                inform = "18";
                break;
            case 13:
                //inform = "This text should be understood by 18-24 year olds.";
                inform = "24";
                break;
            case 14:
                //inform = "This text should be understood by 24+ year olds.";
                inform = "24";
                break;
        }
        return inform;
    }

    private static int sylaby(String word) {
        int count = 0;



        return count;
    }
}
